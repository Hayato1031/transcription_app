import React, { useState, useEffect } from 'react';
import { Mic, StopCircle, Save, Trash2, Settings } from 'lucide-react';

// 音声認識の状態を模擬するためのサンプルテキスト
const sampleTranscriptions = [
  "こんにちは、音声認識のテストです。",
  "この文字起こしアプリは、会話を自動的にテキストに変換します。",
  "ボタンを押すと録音が開始され、停止ボタンで終了します。",
  "文字起こしされたテキストはリアルタイムで表示されます。",
  "保存ボタンを押すとテキストを保存できます。"
];

const TranscriptionApp = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [transcription, setTranscription] = useState("");
  const [savedTranscriptions, setSavedTranscriptions] = useState([]);
  const [elapsedTime, setElapsedTime] = useState(0);
  const [darkMode, setDarkMode] = useState(false);
  
  // 録音中の時間を更新する
  useEffect(() => {
    let timer;
    if (isRecording) {
      timer = setInterval(() => {
        setElapsedTime(prev => prev + 1);
        
        // 模擬: 新しいテキストを追加
        if (elapsedTime % 5 === 0 && elapsedTime < sampleTranscriptions.length * 5) {
          const newText = sampleTranscriptions[Math.floor(elapsedTime / 5)];
          setTranscription(prev => prev + " " + newText);
        }
      }, 1000);
    } else {
      clearInterval(timer);
    }
    
    return () => clearInterval(timer);
  }, [isRecording, elapsedTime]);
  
  const startRecording = () => {
    setIsRecording(true);
    setElapsedTime(0);
    setTranscription("");
  };
  
  const stopRecording = () => {
    setIsRecording(false);
  };
  
  const saveTranscription = () => {
    if (transcription.trim()) {
      setSavedTranscriptions([...savedTranscriptions, transcription]);
      setTranscription("");
    }
  };
  
  const clearTranscription = () => {
    setTranscription("");
  };
  
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };
  
  // 波形の動きを表現する関数（録音中のアニメーション用）
  const WaveformAnimation = () => {
    return (
      <div className="flex items-center justify-center gap-1">
        {[...Array(5)].map((_, i) => (
          <div 
            key={i}
            className={`w-1 bg-rose-400 rounded-full animate-pulse`} 
            style={{
              height: `${8 + (i % 3) * 4}px`,
              animationDelay: `${i * 0.2}s`
            }}
          ></div>
        ))}
      </div>
    );
  };
  
  const bgColor = darkMode ? 'bg-gray-900' : 'bg-gray-50';
  const cardBg = darkMode ? 'bg-gray-800' : 'bg-white';
  const textColor = darkMode ? 'text-gray-100' : 'text-gray-800';
  const subTextColor = darkMode ? 'text-gray-400' : 'text-gray-500';
  
  return (
    <div className={`flex flex-col h-screen ${bgColor} transition-colors duration-300`}>
      {/* ヘッダー */}
      <header className="p-4 bg-gradient-to-r from-violet-600 to-rose-500 text-white shadow-lg">
        <div className="flex justify-between items-center max-w-6xl mx-auto">
          <h1 className="text-xl font-bold tracking-tight">VOICE NOTE</h1>
          <div className="flex gap-3">
            <button 
              onClick={() => setDarkMode(!darkMode)}
              className="p-2 rounded-full hover:bg-white/20 transition-colors"
            >
              {darkMode ? '☀️' : '🌙'}
            </button>
            <button className="p-2 rounded-full hover:bg-white/20 transition-colors">
              <Settings size={20} />
            </button>
          </div>
        </div>
      </header>
      
      {/* メイン */}
      <main className="flex-1 p-4 overflow-hidden flex flex-col max-w-6xl mx-auto w-full">
        {/* 録音状態 */}
        <div className={`${cardBg} rounded-xl shadow-lg p-4 mb-6 flex justify-between items-center backdrop-blur-sm bg-opacity-80 border ${darkMode ? 'border-gray-700' : 'border-gray-100'}`}>
          <div className="flex items-center gap-3">
            {isRecording ? (
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded-full bg-rose-500 animate-pulse"></div>
                <span className={`font-medium ${textColor}`}>録音中</span>
                <WaveformAnimation />
              </div>
            ) : (
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded-full bg-gray-300"></div>
                <span className={`font-medium ${textColor}`}>待機中</span>
              </div>
            )}
          </div>
          {isRecording && (
            <div className="text-rose-500 font-mono font-bold">{formatTime(elapsedTime)}</div>
          )}
        </div>
        
        {/* 文字起こし表示エリア */}
        <div className={`flex-1 ${cardBg} rounded-xl shadow-lg p-6 mb-6 overflow-auto backdrop-blur-sm bg-opacity-90 border ${darkMode ? 'border-gray-700' : 'border-gray-100'}`}>
          <div className="h-full">
            {transcription ? (
              <p className={`whitespace-pre-wrap leading-relaxed ${textColor}`}>{transcription}</p>
            ) : (
              <div className="flex flex-col items-center justify-center h-full">
                <div className="w-24 h-24 rounded-full bg-gradient-to-br from-violet-200 to-rose-200 flex items-center justify-center mb-4 opacity-60">
                  <Mic size={36} className={darkMode ? 'text-gray-800' : 'text-gray-600'} />
                </div>
                <p className={`${subTextColor} text-center`}>
                  {isRecording ? "音声を認識しています..." : "マイクボタンを押して録音を開始してください"}
                </p>
              </div>
            )}
          </div>
        </div>
        
        {/* 保存された文字起こしリスト */}
        {savedTranscriptions.length > 0 && (
          <div className={`${cardBg} rounded-xl shadow-lg p-5 mb-6 max-h-40 overflow-auto backdrop-blur-sm bg-opacity-80 border ${darkMode ? 'border-gray-700' : 'border-gray-100'}`}>
            <h2 className={`text-sm font-bold ${textColor} mb-3`}>保存済み文字起こし</h2>
            <div className="space-y-2">
              {savedTranscriptions.map((text, index) => (
                <div key={index} className={`p-3 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-50'} text-sm ${textColor}`}>
                  {text.substring(0, 100)}...
                </div>
              ))}
            </div>
          </div>
        )}
        
        {/* コントロールボタン */}
        <div className="flex justify-center gap-4 py-6">
          {!isRecording ? (
            <button 
              onClick={startRecording}
              className="p-5 bg-gradient-to-r from-violet-600 to-rose-500 text-white rounded-full shadow-xl hover:shadow-lg hover:from-violet-700 hover:to-rose-600 transition-all duration-300"
            >
              <Mic size={28} />
            </button>
          ) : (
            <button 
              onClick={stopRecording}
              className="p-5 bg-gradient-to-r from-red-500 to-rose-600 text-white rounded-full shadow-xl hover:shadow-lg hover:from-red-600 hover:to-rose-700 transition-all duration-300"
            >
              <StopCircle size={28} />
            </button>
          )}
          
          <button 
            onClick={saveTranscription}
            className={`p-5 bg-gradient-to-r from-emerald-500 to-teal-500 text-white rounded-full shadow-xl hover:shadow-lg hover:from-emerald-600 hover:to-teal-600 transition-all duration-300 ${!transcription.trim() && 'opacity-50 cursor-not-allowed'}`}
            disabled={!transcription.trim()}
          >
            <Save size={28} />
          </button>
          
          <button 
            onClick={clearTranscription}
            className={`p-5 ${darkMode ? 'bg-gray-700' : 'bg-gray-200'} ${darkMode ? 'text-white' : 'text-gray-600'} rounded-full shadow-xl hover:shadow-lg ${darkMode ? 'hover:bg-gray-600' : 'hover:bg-gray-300'} transition-all duration-300 ${!transcription.trim() && 'opacity-50 cursor-not-allowed'}`}
            disabled={!transcription.trim()}
          >
            <Trash2 size={28} />
          </button>
        </div>
      </main>
    </div>
  );
};

export default TranscriptionApp;